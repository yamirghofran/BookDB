// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: book_genres.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBookGenre = `-- name: AddBookGenre :exec
INSERT INTO BookGenres (book_id, genre_id)
VALUES ($1, $2)
`

type AddBookGenreParams struct {
	BookID  pgtype.UUID
	GenreID int32
}

func (q *Queries) AddBookGenre(ctx context.Context, arg AddBookGenreParams) error {
	_, err := q.db.Exec(ctx, addBookGenre, arg.BookID, arg.GenreID)
	return err
}

const getBooksForGenre = `-- name: GetBooksForGenre :many
SELECT b.id, b.title
FROM Books b
JOIN BookGenres bg ON b.id = bg.book_id
WHERE bg.genre_id = $1
ORDER BY b.title
`

type GetBooksForGenreRow struct {
	ID    pgtype.UUID
	Title string
}

func (q *Queries) GetBooksForGenre(ctx context.Context, genreID int32) ([]GetBooksForGenreRow, error) {
	rows, err := q.db.Query(ctx, getBooksForGenre, genreID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksForGenreRow
	for rows.Next() {
		var i GetBooksForGenreRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenresForBook = `-- name: GetGenresForBook :many
SELECT g.id, g.name
FROM Genres g
JOIN BookGenres bg ON g.id = bg.genre_id
WHERE bg.book_id = $1
ORDER BY g.name
`

func (q *Queries) GetGenresForBook(ctx context.Context, bookID pgtype.UUID) ([]Genre, error) {
	rows, err := q.db.Query(ctx, getGenresForBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBookGenre = `-- name: RemoveBookGenre :exec
DELETE FROM BookGenres
WHERE book_id = $1 AND genre_id = $2
`

type RemoveBookGenreParams struct {
	BookID  pgtype.UUID
	GenreID int32
}

func (q *Queries) RemoveBookGenre(ctx context.Context, arg RemoveBookGenreParams) error {
	_, err := q.db.Exec(ctx, removeBookGenre, arg.BookID, arg.GenreID)
	return err
}
