// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: genres.sql

package db

import (
	"context"
)

const createGenre = `-- name: CreateGenre :one
INSERT INTO Genres (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateGenre(ctx context.Context, name string) (Genre, error) {
	row := q.db.QueryRow(ctx, createGenre, name)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getGenreByID = `-- name: GetGenreByID :one
SELECT id, name
FROM Genres
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGenreByID(ctx context.Context, id int32) (Genre, error) {
	row := q.db.QueryRow(ctx, getGenreByID, id)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getGenreByName = `-- name: GetGenreByName :one
SELECT id, name
FROM Genres
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetGenreByName(ctx context.Context, name string) (Genre, error) {
	row := q.db.QueryRow(ctx, getGenreByName, name)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listGenres = `-- name: ListGenres :many
SELECT id, name
FROM Genres
ORDER BY name
`

func (q *Queries) ListGenres(ctx context.Context) ([]Genre, error) {
	rows, err := q.db.Query(ctx, listGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
