// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Users (name, email)
VALUES ($1, $2)
RETURNING id, name, email, created_at, updated_at
`

type CreateUserParams struct {
	Name  string
	Email string
}

type CreateUserRow struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM Users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, created_at, updated_at
FROM Users
WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, created_at, updated_at
FROM Users
WHERE id = $1 LIMIT 1
`

type GetUserByIDRow struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserLibraryDetails = `-- name: GetUserLibraryDetails :many
SELECT
    b.id,
    b.goodreads_id, -- Added goodreads_id
    b.title,
    b.cover_image_url,
    COALESCE(ARRAY_AGG(DISTINCT a.name ORDER BY a.name) FILTER (WHERE a.name IS NOT NULL), '{}') AS authors
FROM UserLibrary ul
JOIN Books b ON ul.book_id = b.id
LEFT JOIN BookAuthors ba ON b.id = ba.book_id
LEFT JOIN Authors a ON ba.author_id = a.id
WHERE ul.user_id = $1
GROUP BY b.id, ul.added_at -- Assuming b.id is PK, order by when user added to library
ORDER BY ul.added_at DESC
`

type GetUserLibraryDetailsRow struct {
	ID            pgtype.UUID
	GoodreadsID   int64
	Title         string
	CoverImageUrl pgtype.Text
	Authors       interface{}
}

func (q *Queries) GetUserLibraryDetails(ctx context.Context, userID pgtype.UUID) ([]GetUserLibraryDetailsRow, error) {
	rows, err := q.db.Query(ctx, getUserLibraryDetails, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserLibraryDetailsRow
	for rows.Next() {
		var i GetUserLibraryDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.GoodreadsID,
			&i.Title,
			&i.CoverImageUrl,
			&i.Authors,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReviewsWithBookInfo = `-- name: GetUserReviewsWithBookInfo :many
SELECT
    r.id AS review_id,
    r.book_id,
    b.title AS book_title,
    b.cover_image_url AS book_cover_image_url, -- Added book cover
    r.user_id,
    r.rating,
    r.text AS review_text, -- Corrected column name from review_text to text
    r.created_at AS review_created_at,
    r.updated_at AS review_updated_at
FROM Reviews r
JOIN Books b ON r.book_id = b.id
WHERE r.user_id = $1
ORDER BY r.updated_at DESC
`

type GetUserReviewsWithBookInfoRow struct {
	ReviewID          pgtype.UUID
	BookID            pgtype.UUID
	BookTitle         string
	BookCoverImageUrl pgtype.Text
	UserID            pgtype.UUID
	Rating            pgtype.Int2
	ReviewText        string
	ReviewCreatedAt   pgtype.Timestamptz
	ReviewUpdatedAt   pgtype.Timestamptz
}

func (q *Queries) GetUserReviewsWithBookInfo(ctx context.Context, userID pgtype.UUID) ([]GetUserReviewsWithBookInfoRow, error) {
	rows, err := q.db.Query(ctx, getUserReviewsWithBookInfo, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserReviewsWithBookInfoRow
	for rows.Next() {
		var i GetUserReviewsWithBookInfoRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.BookID,
			&i.BookTitle,
			&i.BookCoverImageUrl,
			&i.UserID,
			&i.Rating,
			&i.ReviewText,
			&i.ReviewCreatedAt,
			&i.ReviewUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, created_at, updated_at
FROM Users
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

type ListUsersRow struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE Users
SET
  name = COALESCE($1, name),
  email = COALESCE($2, email),
  updated_at = CURRENT_TIMESTAMP
WHERE id = $3
RETURNING id, name, email, created_at, updated_at
`

type UpdateUserParams struct {
	Name  string
	Email string
	ID    pgtype.UUID
}

type UpdateUserRow struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Name, arg.Email, arg.ID)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
