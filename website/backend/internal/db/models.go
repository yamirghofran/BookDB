// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserActivityType string

const (
	UserActivityTypeSearch            UserActivityType = "search"
	UserActivityTypeViewBook          UserActivityType = "view_book"
	UserActivityTypeViewAuthor        UserActivityType = "view_author"
	UserActivityTypeAddToLibrary      UserActivityType = "add_to_library"
	UserActivityTypeRemoveFromLibrary UserActivityType = "remove_from_library"
	UserActivityTypePostReview        UserActivityType = "post_review"
	UserActivityTypeUpdateReview      UserActivityType = "update_review"
	UserActivityTypeDeleteReview      UserActivityType = "delete_review"
	UserActivityTypeLogin             UserActivityType = "login"
	UserActivityTypeRegister          UserActivityType = "register"
	UserActivityTypeUpdateProfile     UserActivityType = "update_profile"
)

func (e *UserActivityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserActivityType(s)
	case string:
		*e = UserActivityType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserActivityType: %T", src)
	}
	return nil
}

type NullUserActivityType struct {
	UserActivityType UserActivityType
	Valid            bool // Valid is true if UserActivityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserActivityType) Scan(value interface{}) error {
	if value == nil {
		ns.UserActivityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserActivityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserActivityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserActivityType), nil
}

type Activitylog struct {
	ID           int64
	UserID       pgtype.UUID
	ActivityType UserActivityType
	TargetID     pgtype.UUID
	Details      []byte
	CreatedAt    pgtype.Timestamptz
}

type Author struct {
	ID            pgtype.UUID
	Name          string
	AverageRating pgtype.Numeric
	RatingsCount  pgtype.Int4
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

type Book struct {
	ID              pgtype.UUID
	NcfID           pgtype.Int4
	GoodreadsID     int64
	GoodreadsUrl    pgtype.Text
	Title           string
	Description     pgtype.Text
	PublicationYear pgtype.Int8
	CoverImageUrl   pgtype.Text
	AverageRating   pgtype.Numeric
	RatingsCount    pgtype.Int8
	SearchVector    interface{}
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

type Bookauthor struct {
	BookID   pgtype.UUID
	AuthorID pgtype.UUID
}

type Bookgenre struct {
	BookID  pgtype.UUID
	GenreID int32
}

type Genre struct {
	ID   int32
	Name string
}

type Review struct {
	ID        pgtype.UUID
	Text      string
	Rating    pgtype.Int2
	BookID    pgtype.UUID
	UserID    pgtype.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type Similarbook struct {
	BookID1 pgtype.UUID
	BookID2 pgtype.UUID
}

type User struct {
	ID        pgtype.UUID
	NcfID     pgtype.Int4
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type Userlibrary struct {
	UserID  pgtype.UUID
	BookID  pgtype.UUID
	AddedAt pgtype.Timestamptz
}
