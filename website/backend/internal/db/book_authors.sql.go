// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: book_authors.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBookAuthor = `-- name: AddBookAuthor :exec
INSERT INTO BookAuthors (book_id, author_id)
VALUES ($1, $2)
`

type AddBookAuthorParams struct {
	BookID   pgtype.UUID
	AuthorID pgtype.UUID
}

func (q *Queries) AddBookAuthor(ctx context.Context, arg AddBookAuthorParams) error {
	_, err := q.db.Exec(ctx, addBookAuthor, arg.BookID, arg.AuthorID)
	return err
}

const getAuthorsForBook = `-- name: GetAuthorsForBook :many
SELECT a.id, a.name
FROM Authors a
JOIN BookAuthors ba ON a.id = ba.author_id
WHERE ba.book_id = $1
ORDER BY a.name
`

type GetAuthorsForBookRow struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) GetAuthorsForBook(ctx context.Context, bookID pgtype.UUID) ([]GetAuthorsForBookRow, error) {
	rows, err := q.db.Query(ctx, getAuthorsForBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAuthorsForBookRow
	for rows.Next() {
		var i GetAuthorsForBookRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksForAuthor = `-- name: GetBooksForAuthor :many
SELECT b.id, b.title
FROM Books b
JOIN BookAuthors ba ON b.id = ba.book_id
WHERE ba.author_id = $1
ORDER BY b.title
`

type GetBooksForAuthorRow struct {
	ID    pgtype.UUID
	Title string
}

func (q *Queries) GetBooksForAuthor(ctx context.Context, authorID pgtype.UUID) ([]GetBooksForAuthorRow, error) {
	rows, err := q.db.Query(ctx, getBooksForAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksForAuthorRow
	for rows.Next() {
		var i GetBooksForAuthorRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBookAuthor = `-- name: RemoveBookAuthor :exec
DELETE FROM BookAuthors
WHERE book_id = $1 AND author_id = $2
`

type RemoveBookAuthorParams struct {
	BookID   pgtype.UUID
	AuthorID pgtype.UUID
}

func (q *Queries) RemoveBookAuthor(ctx context.Context, arg RemoveBookAuthorParams) error {
	_, err := q.db.Exec(ctx, removeBookAuthor, arg.BookID, arg.AuthorID)
	return err
}
