// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity_logs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getActivityLogsByType = `-- name: GetActivityLogsByType :many
SELECT id, user_id, activity_type, target_id, details, created_at
FROM ActivityLogs
WHERE activity_type = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetActivityLogsByTypeParams struct {
	ActivityType UserActivityType
	Limit        int32
	Offset       int32
}

func (q *Queries) GetActivityLogsByType(ctx context.Context, arg GetActivityLogsByTypeParams) ([]Activitylog, error) {
	rows, err := q.db.Query(ctx, getActivityLogsByType, arg.ActivityType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activitylog
	for rows.Next() {
		var i Activitylog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityType,
			&i.TargetID,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivityLogsForUser = `-- name: GetActivityLogsForUser :many
SELECT id, user_id, activity_type, target_id, details, created_at
FROM ActivityLogs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetActivityLogsForUserParams struct {
	UserID pgtype.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetActivityLogsForUser(ctx context.Context, arg GetActivityLogsForUserParams) ([]Activitylog, error) {
	rows, err := q.db.Query(ctx, getActivityLogsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activitylog
	for rows.Next() {
		var i Activitylog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityType,
			&i.TargetID,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logActivity = `-- name: LogActivity :one
INSERT INTO ActivityLogs (user_id, activity_type, target_id, details)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, activity_type, target_id, details, created_at
`

type LogActivityParams struct {
	UserID       pgtype.UUID
	ActivityType UserActivityType
	TargetID     pgtype.UUID
	Details      []byte
}

func (q *Queries) LogActivity(ctx context.Context, arg LogActivityParams) (Activitylog, error) {
	row := q.db.QueryRow(ctx, logActivity,
		arg.UserID,
		arg.ActivityType,
		arg.TargetID,
		arg.Details,
	)
	var i Activitylog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityType,
		&i.TargetID,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}
