// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: similar_books.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSimilarBook = `-- name: AddSimilarBook :exec
INSERT INTO SimilarBooks (book_id_1, book_id_2)
VALUES (
    CASE WHEN $1 < $2 THEN $1 ELSE $2 END,
    CASE WHEN $1 < $2 THEN $2 ELSE $1 END
)
`

type AddSimilarBookParams struct {
	Column1 interface{}
	Column2 interface{}
}

func (q *Queries) AddSimilarBook(ctx context.Context, arg AddSimilarBookParams) error {
	_, err := q.db.Exec(ctx, addSimilarBook, arg.Column1, arg.Column2)
	return err
}

const getSimilarBookDetails = `-- name: GetSimilarBookDetails :many
SELECT b.id, b.goodreads_id, b.goodreads_url, b.title, b.description, b.publication_year, b.cover_image_url, b.average_rating, b.ratings_count, b.search_vector, b.created_at, b.updated_at
FROM Books b
JOIN (
    SELECT book_id_2 AS similar_id FROM SimilarBooks WHERE SimilarBooks.book_id_1 = $1
    UNION
    SELECT book_id_1 AS similar_id FROM SimilarBooks WHERE SimilarBooks.book_id_2 = $1
) AS similar_ids ON b.id = similar_ids.similar_id
`

// This query joins with Books to get full details
func (q *Queries) GetSimilarBookDetails(ctx context.Context, bookID1 pgtype.UUID) ([]Book, error) {
	rows, err := q.db.Query(ctx, getSimilarBookDetails, bookID1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.GoodreadsID,
			&i.GoodreadsUrl,
			&i.Title,
			&i.Description,
			&i.PublicationYear,
			&i.CoverImageUrl,
			&i.AverageRating,
			&i.RatingsCount,
			&i.SearchVector,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSimilarBooks = `-- name: GetSimilarBooks :many
SELECT
    CASE WHEN book_id_1 = $1 THEN book_id_2 ELSE book_id_1 END AS similar_book_id
FROM SimilarBooks
WHERE book_id_1 = $1 OR book_id_2 = $1
`

// This query just returns the IDs, keeping the simpler logic if you need just IDs
func (q *Queries) GetSimilarBooks(ctx context.Context, bookID1 pgtype.UUID) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getSimilarBooks, bookID1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var similar_book_id interface{}
		if err := rows.Scan(&similar_book_id); err != nil {
			return nil, err
		}
		items = append(items, similar_book_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSimilarBook = `-- name: RemoveSimilarBook :exec

DELETE FROM SimilarBooks
WHERE (book_id_1 = $1 AND book_id_2 = $2) OR (book_id_1 = $2 AND book_id_2 = $1)
`

type RemoveSimilarBookParams struct {
	BookID1 pgtype.UUID
	BookID2 pgtype.UUID
}

// Ensure book_id_1 < book_id_2
func (q *Queries) RemoveSimilarBook(ctx context.Context, arg RemoveSimilarBookParams) error {
	_, err := q.db.Exec(ctx, removeSimilarBook, arg.BookID1, arg.BookID2)
	return err
}
