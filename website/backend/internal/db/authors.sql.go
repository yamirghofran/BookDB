// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: authors.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO Authors (name, average_rating, ratings_count)
VALUES ($1, $2, $3)
RETURNING id, name, average_rating, ratings_count, created_at, updated_at
`

type CreateAuthorParams struct {
	Name          string
	AverageRating pgtype.Numeric
	RatingsCount  pgtype.Int4
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.AverageRating, arg.RatingsCount)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AverageRating,
		&i.RatingsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM Authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthorByID = `-- name: GetAuthorByID :one
SELECT id, name, average_rating, ratings_count, created_at, updated_at
FROM Authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthorByID(ctx context.Context, id pgtype.UUID) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthorByID, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AverageRating,
		&i.RatingsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthorByName = `-- name: GetAuthorByName :many
SELECT id, name, average_rating, ratings_count, created_at, updated_at
FROM Authors
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
`

func (q *Queries) GetAuthorByName(ctx context.Context, dollar_1 pgtype.Text) ([]Author, error) {
	rows, err := q.db.Query(ctx, getAuthorByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AverageRating,
			&i.RatingsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, average_rating, ratings_count, created_at, updated_at
FROM Authors
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListAuthorsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AverageRating,
			&i.RatingsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE Authors
SET
  name = COALESCE($1, name),
  average_rating = COALESCE($2, average_rating),
  ratings_count = COALESCE($3, ratings_count),
  updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, name, average_rating, ratings_count, created_at, updated_at
`

type UpdateAuthorParams struct {
	Name          string
	AverageRating pgtype.Numeric
	RatingsCount  pgtype.Int4
	ID            pgtype.UUID
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor,
		arg.Name,
		arg.AverageRating,
		arg.RatingsCount,
		arg.ID,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AverageRating,
		&i.RatingsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
