// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reviews.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReview = `-- name: CreateReview :one
INSERT INTO Reviews (text, rating, book_id, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id, text, rating, book_id, user_id, created_at, updated_at
`

type CreateReviewParams struct {
	Text   string
	Rating pgtype.Int2
	BookID pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.Text,
		arg.Rating,
		arg.BookID,
		arg.UserID,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Rating,
		&i.BookID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM Reviews
WHERE id = $1 AND user_id = $2
`

type DeleteReviewParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteReview(ctx context.Context, arg DeleteReviewParams) error {
	_, err := q.db.Exec(ctx, deleteReview, arg.ID, arg.UserID)
	return err
}

const getReviewByID = `-- name: GetReviewByID :one
SELECT id, text, rating, book_id, user_id, created_at, updated_at
FROM Reviews
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReviewByID(ctx context.Context, id pgtype.UUID) (Review, error) {
	row := q.db.QueryRow(ctx, getReviewByID, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Rating,
		&i.BookID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReviewsByUser = `-- name: GetReviewsByUser :many
SELECT r.id, r.text, r.rating, r.book_id, r.user_id, r.created_at, r.updated_at, b.title AS book_title -- Include book title for context
FROM Reviews r
JOIN Books b ON r.book_id = b.id
WHERE r.user_id = $1
ORDER BY r.created_at DESC
`

type GetReviewsByUserRow struct {
	ID        pgtype.UUID
	Text      string
	Rating    pgtype.Int2
	BookID    pgtype.UUID
	UserID    pgtype.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	BookTitle string
}

func (q *Queries) GetReviewsByUser(ctx context.Context, userID pgtype.UUID) ([]GetReviewsByUserRow, error) {
	rows, err := q.db.Query(ctx, getReviewsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsByUserRow
	for rows.Next() {
		var i GetReviewsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Rating,
			&i.BookID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BookTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsForBook = `-- name: GetReviewsForBook :many
SELECT r.id, r.text, r.rating, r.book_id, r.user_id, r.created_at, r.updated_at, u.name AS user_name -- Include user name for context
FROM Reviews r
JOIN Users u ON r.user_id = u.id
WHERE r.book_id = $1
ORDER BY r.created_at DESC
`

type GetReviewsForBookRow struct {
	ID        pgtype.UUID
	Text      string
	Rating    pgtype.Int2
	BookID    pgtype.UUID
	UserID    pgtype.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	UserName  string
}

func (q *Queries) GetReviewsForBook(ctx context.Context, bookID pgtype.UUID) ([]GetReviewsForBookRow, error) {
	rows, err := q.db.Query(ctx, getReviewsForBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsForBookRow
	for rows.Next() {
		var i GetReviewsForBookRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Rating,
			&i.BookID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE Reviews
SET
  text = COALESCE($1, text),
  rating = $2, -- Allow setting rating to NULL
  updated_at = CURRENT_TIMESTAMP
WHERE id = $3 AND user_id = $4 -- Ensure user owns the review
RETURNING id, text, rating, book_id, user_id, created_at, updated_at
`

type UpdateReviewParams struct {
	Text   string
	Rating pgtype.Int2
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, updateReview,
		arg.Text,
		arg.Rating,
		arg.ID,
		arg.UserID,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Rating,
		&i.BookID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
