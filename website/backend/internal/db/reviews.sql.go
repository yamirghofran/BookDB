// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reviews.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getReviewsByBookID = `-- name: GetReviewsByBookID :many
SELECT
    r.id,
    r.book_id,
    r.user_id,
    u.name AS user_name,
    -- Removed u.avatar_url as it does not exist in the Users table
    r.rating,
    r.text AS review_text, -- Corrected column name to r.text
    r.created_at,
    r.updated_at,
    COUNT(*) OVER() AS total_reviews -- Add total count for pagination
FROM Reviews r
JOIN Users u ON r.user_id = u.id
WHERE r.book_id = $1
ORDER BY r.created_at DESC
LIMIT $2
OFFSET $3
`

type GetReviewsByBookIDParams struct {
	BookID pgtype.UUID
	Limit  int32
	Offset int32
}

type GetReviewsByBookIDRow struct {
	ID           pgtype.UUID
	BookID       pgtype.UUID
	UserID       pgtype.UUID
	UserName     string
	Rating       pgtype.Int2
	ReviewText   string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	TotalReviews int64
}

func (q *Queries) GetReviewsByBookID(ctx context.Context, arg GetReviewsByBookIDParams) ([]GetReviewsByBookIDRow, error) {
	rows, err := q.db.Query(ctx, getReviewsByBookID, arg.BookID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsByBookIDRow
	for rows.Next() {
		var i GetReviewsByBookIDRow
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.UserID,
			&i.UserName,
			&i.Rating,
			&i.ReviewText,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalReviews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
