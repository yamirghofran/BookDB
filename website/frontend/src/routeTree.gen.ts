/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthorsImport } from './routes/authors'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as BooksIdImport } from './routes/books.$id'
import { Route as AuthorsIdImport } from './routes/authors.$id'

// Create/Update Routes

const AuthorsRoute = AuthorsImport.update({
  id: '/authors',
  path: '/authors',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const BooksIdRoute = BooksIdImport.update({
  id: '/books/$id',
  path: '/books/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthorsIdRoute = AuthorsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthorsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/authors': {
      id: '/authors'
      path: '/authors'
      fullPath: '/authors'
      preLoaderRoute: typeof AuthorsImport
      parentRoute: typeof rootRoute
    }
    '/authors/$id': {
      id: '/authors/$id'
      path: '/$id'
      fullPath: '/authors/$id'
      preLoaderRoute: typeof AuthorsIdImport
      parentRoute: typeof AuthorsImport
    }
    '/books/$id': {
      id: '/books/$id'
      path: '/books/$id'
      fullPath: '/books/$id'
      preLoaderRoute: typeof BooksIdImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthorsRouteChildren {
  AuthorsIdRoute: typeof AuthorsIdRoute
}

const AuthorsRouteChildren: AuthorsRouteChildren = {
  AuthorsIdRoute: AuthorsIdRoute,
}

const AuthorsRouteWithChildren =
  AuthorsRoute._addFileChildren(AuthorsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/authors': typeof AuthorsRouteWithChildren
  '/authors/$id': typeof AuthorsIdRoute
  '/books/$id': typeof BooksIdRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/authors': typeof AuthorsRouteWithChildren
  '/authors/$id': typeof AuthorsIdRoute
  '/books/$id': typeof BooksIdRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/authors': typeof AuthorsRouteWithChildren
  '/authors/$id': typeof AuthorsIdRoute
  '/books/$id': typeof BooksIdRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/authors'
    | '/authors/$id'
    | '/books/$id'
    | '/demo/tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/authors' | '/authors/$id' | '/books/$id' | '/demo/tanstack-query'
  id:
    | '__root__'
    | '/'
    | '/authors'
    | '/authors/$id'
    | '/books/$id'
    | '/demo/tanstack-query'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthorsRoute: typeof AuthorsRouteWithChildren
  BooksIdRoute: typeof BooksIdRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthorsRoute: AuthorsRouteWithChildren,
  BooksIdRoute: BooksIdRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/authors",
        "/books/$id",
        "/demo/tanstack-query"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/authors": {
      "filePath": "authors.tsx",
      "children": [
        "/authors/$id"
      ]
    },
    "/authors/$id": {
      "filePath": "authors.$id.tsx",
      "parent": "/authors"
    },
    "/books/$id": {
      "filePath": "books.$id.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
