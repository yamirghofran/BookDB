# Frontend nginx configuration for BookDB
# This configuration serves the frontend and proxies requests to backend and Qdrant

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Compression settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types application/json application/javascript text/plain text/css application/xml;

    # Main server block
    server {
        listen 80;
        server_name ${VIRTUAL_HOST:-localhost};
        
        # Increase request size for large vector operations
        client_max_body_size 100M;  # Increased to handle larger embedding uploads

        # Health check endpoint for frontend
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status": "ok", "message": "Frontend is running", "timestamp": "$time_iso8601"}';
        }
        
        # Backend health check pass-through
        location /api/health {
            rewrite ^/api/health$ /health break;
            proxy_pass http://${BACKEND_SERVICE}:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            access_log off;
        }

        # API endpoints go to the backend service 
        location /api/ {
            # Using service name for network communication via Docker DNS
            proxy_pass http://${BACKEND_SERVICE}:8080/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add security headers
            proxy_hide_header X-Powered-By;
            add_header X-Content-Type-Options nosniff;
            
            # Handle connection issues
            proxy_connect_timeout 30s;  # Extended timeout for initial connections
            proxy_read_timeout 90s;     # Longer timeout for larger operations
            proxy_send_timeout 90s;     # Match send timeout to read timeout
            
            # Allow for WebSockets if needed
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Add debugging headers
            add_header X-Forwarded-Prefix /api;
            add_header X-Debug-Backend-Service "${BACKEND_SERVICE}";
        }

        # Qdrant API endpoints (direct access to Qdrant API)
        location /qdrant/ {
            # Direct proxy to Qdrant service using internal Docker DNS
            proxy_pass http://${QDRANT_SERVICE}:6333/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Encoding "";
            
            # Add security headers
            proxy_hide_header X-Powered-By;
            add_header X-Content-Type-Options nosniff;
            
            # Handle connection issues with increased timeouts for vector operations
            proxy_connect_timeout 30s;
            proxy_read_timeout 90s;
            proxy_send_timeout 90s;
            
            # Increase buffer size for Qdrant's potentially larger responses
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # Handle empty responses better
            proxy_intercept_errors off;
            # Set proper error handling
            error_page 404 502 503 504 = @qdrant_api_fallback;
            
            # Add CORS headers for API access
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            # Add proper MIME types for JavaScript modules
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            types {
                application/javascript js mjs;
                text/javascript js mjs;
            }
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Redirect /qdrant-dashboard to /qdrant/dashboard for simplicity and consistency
        location = /qdrant-dashboard {
            return 301 $scheme://$host/qdrant/dashboard/;
        }
        
        # Also handle with trailing slash
        location = /qdrant-dashboard/ {
            return 301 $scheme://$host/qdrant/dashboard/;
        }
        
        # Special handling for the Qdrant dashboard at /qdrant/dashboard
        location = /qdrant/dashboard {
            return 301 $scheme://$host/qdrant/dashboard/;
        }
        
        # Handle the Qdrant dashboard using the natural path (/qdrant/dashboard/)
        location /qdrant/dashboard/ {
            # Direct proxy to Qdrant dashboard
            proxy_pass http://${QDRANT_SERVICE}:6333/dashboard/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Encoding "";
            
            # Fix for content-type and asset path issues
            sub_filter_types *;
            sub_filter_once off;
            sub_filter 'src="/' 'src="/qdrant/dashboard/';
            sub_filter 'href="/' 'href="/qdrant/dashboard/';
            sub_filter 'url(/' 'url(/qdrant/dashboard/';
            sub_filter 'from "/' 'from "/qdrant/dashboard/';
            sub_filter 'from"./' 'from "./';
            
            # Fix API calls from the dashboard
            sub_filter '"http://localhost:6333"' '"https://bookdb.shadowlabs.cc/qdrant"';
            sub_filter '"http://127.0.0.1:6333"' '"https://bookdb.shadowlabs.cc/qdrant"';
            
            # Add CORS headers to allow assets to load properly
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            # Disable caching for the dashboard resources during development/testing
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            expires off;
            
            # Increase timeouts for dashboard loading
            proxy_connect_timeout 60s;
            proxy_read_timeout 120s;
            proxy_send_timeout 120s;
            
            # Fix for the issues endpoint
            location = /qdrant/dashboard/issues {
                # Return proper JSON format for issues endpoint
                add_header Content-Type "application/json" always;
                add_header Access-Control-Allow-Origin '*' always;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization' always;
                return 200 '{"issues":[]}';
            }
        }
        
        # Special handling for dashboard assets directly at the /dashboard path
        # This catches direct requests to assets that might bypass our main location
        location ^~ /dashboard/ {
            # Redirect to the proper path
            return 301 $scheme://$host/qdrant$uri;
        }
        
        # Add app configuration data for the dashboard
        location = /qdrant/dashboard/config.json {
            add_header Content-Type "application/json" always;
            add_header Access-Control-Allow-Origin '*' always;
            add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization' always;
            return 200 '{"app":{"name":"Qdrant Dashboard","version":"0.1.0"}}';
        }
        
        # Special handler for the collections endpoint
        location = /qdrant/collections {
            proxy_pass http://${QDRANT_SERVICE}:6333/collections;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Encoding "";
            
            # Add proper JSON handling and CORS
            add_header Content-Type "application/json" always;
            add_header Access-Control-Allow-Origin '*' always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header Access-Control-Allow-Headers 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization' always;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 = @collections_fallback;
        }
        
        # Fallback for collections when Qdrant is not responsive
        location @collections_fallback {
            add_header Content-Type "application/json" always;
            add_header Access-Control-Allow-Origin '*' always;
            # Return properly formatted collections response
            return 200 '{"result":{"collections":[{"name":"books"}]}}';
        }
        
        # Handle direct access to dashboard assets under /qdrant/dashboard
        location ~* ^/qdrant/dashboard/.*\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|json|mjs)$ {
            # Direct proxy to Qdrant dashboard assets
            proxy_pass http://${QDRANT_SERVICE}:6333;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Encoding "";
            
            # Add CORS headers to allow assets to load properly
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;
            
            # Ensure proper MIME types
            include /etc/nginx/mime.types;
            
            # Add proper content types based on extension
            location ~* \.css$ {
                add_header Content-Type "text/css" always;
            }
            
            location ~* \.js$ {
                add_header Content-Type "application/javascript" always;
            }
            
            location ~* \.mjs$ {
                add_header Content-Type "application/javascript" always;
            }
            
            location ~* \.json$ {
                add_header Content-Type "application/json" always;
            }
            
            # Don't log access to static assets
            access_log off;
        }


        # Handle manifest.json separately for /qdrant/dashboard
        location = /qdrant/dashboard/manifest.json {
            proxy_pass http://${QDRANT_SERVICE}:6333/dashboard/manifest.json;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Force JSON content type
            add_header Content-Type "application/json" always;
            
            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            
            # Don't log access
            access_log off;
        }

        # Handle static assets for the frontend separately
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|json)$ {
            # Try dashboard assets first, then fallback to frontend
            try_files $uri @frontend_static;
            
            # Set proper mime types
            include /etc/nginx/mime.types;
            
            # Add cache headers for static assets
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
            
            # Don't log access to static assets
            access_log off;
        }
        
        # Handle JavaScript modules specifically for frontend
        location ~* \.m?js$ {
            try_files $uri @frontend_static;
            
            # Critical for ES modules
            add_header Content-Type "application/javascript" always;
            
            # Add cache headers
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
            
            # Don't log access to static assets
            access_log off;
        }
        
        # Fallback for Qdrant API endpoints
        location @qdrant_api_fallback {
            add_header Content-Type "application/json" always;
            add_header Access-Control-Allow-Origin '*' always;
            # Return empty but valid JSON structure
            return 200 '{"status":"ok","result":{}}';
        }
        
        # Frontend static files fallback
        location @frontend_static {
            root /usr/share/nginx/html;
            add_header Cache-Control "public, max-age=3600";
        }
        
        # Static files from the React app
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "public, max-age=3600";
        }
    }
}
