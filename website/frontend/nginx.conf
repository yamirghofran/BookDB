# Frontend nginx configuration for BookDB
# This configuration serves the frontend and proxies requests to backend and Qdrant

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Add additional MIME types for modern web applications (that may not be in default mime.types)
    types {
        application/javascript    mjs;
        application/manifest+json webmanifest;
    }
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Compression settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types application/json application/javascript text/plain text/css application/xml;

    # Main server block - simplified for Cloudflare Tunnel
    server {
        listen 80;
        http2 on;
        # No need for SSL configuration as Cloudflare Tunnel handles SSL termination
        server_name ${VIRTUAL_HOST:-localhost};
        
        # Increase request size for large vector operations
        client_max_body_size 100M;
        
        # Only enable debug headers in non-production environments
        set $is_debug "${APP_ENV}";
        set $debug_path "";
        
        # Use fixed error_log directive 
        # We can't dynamically change log level with variables, so we'll use notice level
        error_log /var/log/nginx/error.log notice;
        
        if ($is_debug != "production") {
            set $debug_path $uri;
        }
        add_header X-Debug-Path $debug_path always;

        # Health check endpoint for frontend
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status": "ok", "message": "Frontend is running", "timestamp": "$time_iso8601"}';
        }
        
        # Backend health check pass-through
        location /api/health {
            # No rewrite needed, the backend expects /api/health
            proxy_pass http://${BACKEND_SERVICE}:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            access_log off;
        }

        # API endpoints go to the backend service
        location /api/ {
            # Important: No trailing slash in proxy_pass to preserve URI path
            proxy_pass http://${BACKEND_SERVICE}:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add security headers
            proxy_hide_header X-Powered-By;
            add_header X-Content-Type-Options nosniff;
            
            # Handle connection issues with increased timeouts
            proxy_connect_timeout 60s;
            proxy_read_timeout 120s;
            proxy_send_timeout 120s;
            
            # Allow for WebSockets if needed
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Only enable debug logging in non-production environments
            add_header X-Forwarded-Prefix /api;
            set $debug_backend_service "";
            set $debug_request_uri "";
            
            if ($is_debug != "production") {
                set $debug_backend_service "${BACKEND_SERVICE}";
                set $debug_request_uri $request_uri;
            }
            
            # Use fixed error_log level - can't use variables reliably
            error_log /var/log/nginx/api_error.log notice;
            add_header X-Debug-Backend-Service $debug_backend_service;
            add_header X-Debug-Request-URI $debug_request_uri;
            
            # Health check is handled by proxy_pass to backend's health endpoint
            # (Removed unsupported health_check directive)
            
            # Set proper error handling
            proxy_intercept_errors on;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            error_page 500 502 503 504 = @api_fallback;
        }

        # Note: Direct Qdrant API access is removed as backend accesses Qdrant directly
        # Only maintaining specific routes required for the dashboard
          # Qdrant dashboard handling - Access to UI only 
        location ~ ^/qdrant/dashboard(/.*)?$ {
            # Normalize trailing slash
            rewrite ^/qdrant/dashboard$ /qdrant/dashboard/ permanent;
            # Rewrite the URI to point to dashboard path
            rewrite ^/qdrant/dashboard(.*)$ /dashboard$1 break;
            
            proxy_pass http://${QDRANT_SERVICE}:6333;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
              # Critical content rewriting
            sub_filter_types application/javascript text/css;
            sub_filter_once off;
            
            # URL Rewrites - consolidated
            sub_filter '="/dashboard/' '="/qdrant/dashboard/';
            sub_filter '="/_app/' '="/qdrant/dashboard/_app/';
            sub_filter 'http://localhost:6333' '$scheme://$host/qdrant';
            sub_filter 'ws://localhost:6333' 'ws://$host/qdrant';
            
            # Cache control for assets
            # Default for non-asset files
            set $cache_control "no-cache, must-revalidate";
            
            # For standard static assets (js, css, png, ico)
            if ($request_uri ~* "\.(js|css|png|ico)$") {
                set $cache_control "public, max-age=3600";
                access_log off;
            }
            
            # For versioned assets with hash in filename
            if ($request_uri ~* "\.[a-f0-9]{8}\.(js|css)$") {
                set $cache_control "public, max-age=31536000";
                access_log off;
            }
            
            # For HTML and other dynamic content
            if ($request_uri !~* "\.(js|css|png|ico)$") {
                expires off;
            }
            
            add_header Cache-Control $cache_control;
        }
        
        # Essential API routes needed for the dashboard to function
        location ~ ^/qdrant/(collections|cluster|snapshots|telemetry|locks|aliases|metrics) {
            # First capture the URI path
            set $qdrant_api_path $1;
            # Rewrite the URI to include the captured path
            rewrite ^/qdrant/(.*)$ /$1 break;
            
            # Ensure proper content types
            proxy_pass http://${QDRANT_SERVICE}:6333;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Ensure proper content types for JSON API responses
            add_header Content-Type "application/json" always;
            
            # Add security headers
            proxy_hide_header X-Powered-By;
            add_header X-Content-Type-Options nosniff;
            
            # Handle connection issues with increased timeouts for vector operations
            proxy_connect_timeout 30s;
            proxy_read_timeout 90s;
            
            error_page 404 502 503 504 = @qdrant_api_fallback;
        }
          # Direct Qdrant API access for frontend if needed
        location /qdrant/api/ {
            rewrite ^/qdrant/api/(.*)$ /$1 break;
            proxy_pass http://${QDRANT_SERVICE}:6333;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # Allow Qdrant to set the proper content types
            proxy_pass_header Content-Type;
            
            # Add security headers
            proxy_hide_header X-Powered-By;
            add_header X-Content-Type-Options nosniff;
            
            # Handle connection issues with increased timeouts
            proxy_connect_timeout 30s;
            proxy_read_timeout 90s;
            
            error_page 404 502 503 504 = @qdrant_api_fallback;
        }
        
        # Fallback for Qdrant dashboard API endpoints
        location @qdrant_api_fallback {
            add_header Content-Type "application/json" always;
            return 200 '{"status":"ok","message":"Dashboard API endpoint not available","result":{}}';
        }

        # Fallback for BookDB API endpoints
        location @api_fallback {
            add_header Content-Type "application/json" always;
            add_header X-Debug-API-Error "true" always;
            add_header X-Backend-Service "${BACKEND_SERVICE}" always;
            return 503 '{"status":"error","message":"The API service is currently unavailable or experiencing issues. Please try again later."}';
        }          # Static files from the React app
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html =404;
            
            # Default cache control
            add_header Cache-Control "public, max-age=3600";
            
            # Add error logging for debugging
            error_log /var/log/nginx/frontend_error.log notice;
            access_log /var/log/nginx/frontend_access.log main;
            
            # Handle specific file types with proper content types
            
            # Handle JavaScript modules correctly with explicit content types
            location ~* \.mjs$ {
                types { application/javascript mjs; }
                add_header Cache-Control "public, max-age=3600";
            }
            
            # Ensure manifest.json is served properly
            location = /manifest.json {
                types { application/manifest+json json; }
                add_header Cache-Control "public, max-age=86400";
                add_header Access-Control-Allow-Origin *;
            }
            
            # Set proper error handling
            error_page 404 = /index.html;
            error_page 500 502 503 504 /50x.html;
            
            # Handle missing files properly
            location = /50x.html {
                root /usr/share/nginx/html;
            }
        }
    }
}
