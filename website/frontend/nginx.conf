# Frontend nginx configuration for BookDB
# This configuration serves the frontend and proxies requests to backend and Qdrant

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Compression settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types application/json application/javascript text/plain text/css application/xml;

    # Main server block
    server {
        listen 80;
        server_name ${VIRTUAL_HOST:-localhost};
        
        # Increase request size for large vector operations
        client_max_body_size 20M;

        # Health check endpoint for frontend
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status": "ok", "message": "Frontend is running", "timestamp": "$time_iso8601"}';
        }
        
        # Backend health check pass-through
        location /api/health {
            rewrite ^/api/health$ /health break;
            proxy_pass http://${BACKEND_SERVICE}:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            access_log off;
        }

        # API endpoints go to the backend service 
        location /api/ {
            # Using service name for network communication via Docker DNS
            proxy_pass http://${BACKEND_SERVICE}:8080/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add security headers
            proxy_hide_header X-Powered-By;
            add_header X-Content-Type-Options nosniff;
            
            # Handle connection issues
            proxy_connect_timeout 10s;
            proxy_read_timeout 60s;  # Increased timeout for larger operations
            
            # Allow for WebSockets if needed
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Qdrant API endpoints (direct access to Qdrant API)
        location /qdrant/ {
            # Direct proxy to Qdrant service using internal Docker DNS
            proxy_pass http://${QDRANT_SERVICE}:6333/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add security headers
            proxy_hide_header X-Powered-By;
            add_header X-Content-Type-Options nosniff;
            
            # Handle connection issues
            proxy_connect_timeout 10s;
            proxy_read_timeout 30s;
            
            # Increase buffer size for Qdrant's potentially larger responses
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # Add proper MIME types for JavaScript modules
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            types {
                application/javascript js mjs;
                text/javascript js mjs;
            }
        }
        
        # Create a separate location for the Qdrant dashboard
        location = /qdrant/dashboard/ {
            # Rewrite to root dashboard
            return 301 $scheme://$host/dashboard/;
        }

        # Handle the Qdrant dashboard at root level
        location /dashboard/ {
            # Direct proxy to Qdrant dashboard
            proxy_pass http://${QDRANT_SERVICE}:6333/dashboard/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add CORS headers to allow assets to load properly
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;
            
            # Disable caching for the dashboard resources
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            expires off;
            
            # Increase timeouts for dashboard loading
            proxy_connect_timeout 30s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            
            # Debug info in headers
            add_header X-Debug-Path $request_uri;
            add_header X-Proxy-Pass "http://${QDRANT_SERVICE}:6333/dashboard/";
        }

        # Handle static assets for the dashboard separately
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|json)$ {
            # Try dashboard assets first, then fallback to frontend
            try_files $uri @frontend_static;
            
            # Set proper mime types
            include /etc/nginx/mime.types;
            types {
                application/javascript js mjs;
                text/javascript js mjs;
            }
            
            # Add cache headers for static assets
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
            
            # Don't log access to static assets
            access_log off;
        }
        
        # Frontend static files fallback
        location @frontend_static {
            root /usr/share/nginx/html;
            add_header Cache-Control "public, max-age=3600";
        }
        
        # Static files from the React app
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "public, max-age=3600";
        }
    }
}
