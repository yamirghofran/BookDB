services:
  # Frontend service with nginx
  frontend:
    build:
      context: ./website/frontend
      dockerfile: Dockerfile
    container_name: bookdb-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - cloudflared
      - backend-network # Only connected to backend network and cloudflared
    # For Nginx proxy manager access:
    environment:
      - BACKEND_SERVICE=bookdb-backend
      - QDRANT_SERVICE=bookdb-qdrant
      - VIRTUAL_HOST=${DOMAIN:-localhost}
      - VIRTUAL_PORT=80
    # Backend Go service
  backend:
    build:
      context: ./website/backend
      dockerfile: Dockerfile
    container_name: bookdb-backend
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-bookdb}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-bookdb_password}
      - DB_NAME=${POSTGRES_DB:-bookdb}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_HTTP_VERSION=1.1 # Force HTTP/1.1 compatibility
      - APP_ENV=${APP_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PORT=${PORT:-8080}
      - JWT_SECRET=${JWT_SECRET:-changeme}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-24h}
      # R2 configuration for database import
      - R2_ENDPOINT_URL=${R2_ENDPOINT_URL}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_OBJECT_KEY=${R2_OBJECT_KEY}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
      - qdrant
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: bookdb-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_wal:/var/lib/postgresql/wal
      - postgres_archive:/var/lib/postgresql/archive
      - ./postgres/init-minimal.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-bookdb}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bookdb_password}
      - POSTGRES_DB=${POSTGRES_DB:-bookdb}
      # Durability and checkpointing settings to improve data safety
      - POSTGRES_INITDB_ARGS=--data-checksums
      - POSTGRES_INITDB_WALDIR=/var/lib/postgresql/wal
      # PostgreSQL configuration parameters
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_MAX_WAL_SIZE=2GB
      - POSTGRES_MIN_WAL_SIZE=1GB
      - POSTGRES_CHECKPOINT_TIMEOUT=5min
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_SYNCHRONOUS_COMMIT=on
      - POSTGRES_FULL_PAGE_WRITES=on
      - POSTGRES_WAL_LEVEL=replica
      - POSTGRES_MAX_WAL_SENDERS=3
      - POSTGRES_ARCHIVE_MODE=on
      - POSTGRES_ARCHIVE_COMMAND=test ! -f /var/lib/postgresql/archive/%f && cp %p /var/lib/postgresql/archive/%f
      - POSTGRES_RESTORE_COMMAND=cp /var/lib/postgresql/archive/%f %p
      - POSTGRES_RECOVERY_TARGET_TIMELINE=latest
      - POSTGRES_ARCHIVE_TIMEOUT=60
      - POSTGRES_WAL_KEEP_SEGMENTS=10
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bookdb}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: bookdb-qdrant
    ports:
      - "127.0.0.1:6333:6333" # REST API - limited to localhost access for production
      - "127.0.0.1:6334:6334" # gRPC API - limited to localhost access for production
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__ENABLE_TLS=false
    restart: unless-stopped
    networks:
      - backend-network
      - cloudflared # Added to allow frontend to connect directly if needed
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:6333/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Qdrant population service

volumes:
  postgres_data:
    driver: local
  postgres_wal:
    driver: local
  postgres_archive:
    driver: local
  qdrant_data:
    driver: local

networks:
  cloudflared:
    external: true
  backend-network:
    driver: bridge
    internal: false # Changed to allow frontend to connect to backend services
