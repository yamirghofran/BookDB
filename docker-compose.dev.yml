services:
  # Frontend service with nginx for development
  frontend:
    build:
      context: ./website/frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80" # Expose frontend on port 8080 for local development
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - frontend_dev
    container_name: bookdb-frontend-dev
    environment:
      - BACKEND_SERVICE=backend
      - QDRANT_SERVICE=qdrant
    volumes:
      # Enable hot-reloading for frontend development (optional)
      - ./website/frontend:/app:ro

  # Backend Go service
  backend:
    build:
      context: ./website/backend
      dockerfile: Dockerfile
    ports:
      - "8081:8080" # Expose backend API port for direct testing
    restart: unless-stopped
    env_file:
      - .env.dev
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=bookdb_dev
      - DB_PASSWORD=bookdb_dev_password
      - DB_NAME=bookdb_dev
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_HTTP_VERSION=1.1 # Force HTTP/1.1 compatibility
    depends_on:
      - postgres
      - qdrant
    networks:
      - backend_dev
      - frontend_dev
    container_name: bookdb-backend-dev

  # PostgreSQL database for development
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432" # Expose postgres port for direct connections during development
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=bookdb_dev
      - POSTGRES_PASSWORD=bookdb_dev_password
      - POSTGRES_DB=bookdb_dev
    restart: unless-stopped
    networks:
      - backend_dev
    container_name: bookdb-postgres-dev

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333" # REST API
      - "6334:6334" # gRPC API
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__ENABLE_TLS=false
    volumes:
      - qdrant_data_dev:/qdrant/storage
    restart: unless-stopped
    networks:
      - backend_dev
      - frontend_dev
    container_name: qdrant-dev
    # Add healthcheck with curl instead of wget for development
    healthcheck:
      test: [ "CMD", "curl", "-f", "-H", "Accept: application/json", "-H", "User-Agent: Docker-Healthcheck/1.0", "--http1.1", "http://localhost:6333/healthz" ]
      interval: 30s # Longer interval for development to reduce noise
      timeout: 10s
      retries: 5
      start_period: 15s
  # Qdrant population service

volumes:
  postgres_data_dev:
    driver: local
  qdrant_data_dev:
    driver: local

networks:
  frontend_dev:
    driver: bridge
  backend_dev:
    driver: bridge
