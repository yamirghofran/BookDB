services:
  # Frontend service with nginx
  frontend-dev:
    build:
      context: ./website/frontend
      dockerfile: Dockerfile
    container_name: bookdb-frontend-dev
    ports:
      - "80:80" # Main application on standard HTTP port
    volumes:
      # Mount nginx.conf as template for environment substitution
      - ./website/frontend/nginx.conf:/etc/nginx/nginx.template:ro
      # Mount frontend source code for live reloading
      - ./website/frontend/src:/usr/share/nginx/html/src:ro
      - ./website/frontend/public:/usr/share/nginx/html/public:ro
    restart: unless-stopped
    depends_on:
      - backend-dev
      - qdrant-dev
    networks:
      - app_network
    environment:
      - BACKEND_SERVICE=bookdb-backend-dev
      - QDRANT_SERVICE=bookdb-qdrant-dev
      - VIRTUAL_HOST=localhost
      - APP_ENV=development
  # Backend Go service  backend-dev:
  backend-dev:
    build:
      context: ./website/backend
      dockerfile: Dockerfile
    container_name: bookdb-backend-dev
    ports:
      - "8080:8080" # Direct access to API at localhost:8080
    restart: unless-stopped
    environment:
      - DB_HOST=bookdb-postgres-dev
      - DB_PORT=5432
      - DB_USER=bookdb_dev
      - DB_PASSWORD=bookdb_dev_password
      - DB_NAME=bookdb_dev
      - QDRANT_HOST=bookdb-qdrant-dev
      # Use gRPC communication with Qdrant
      - QDRANT_PORT=6333 # HTTP port for health checks
      - QDRANT_GRPC_PORT=6334 # gRPC port for all other operations
      - QDRANT_API_KEY=dev_qdrant_key
      - APP_ENV=development
      - LOG_LEVEL=debug
      - PORT=8080
      - JWT_SECRET=dev_secret_key_change_in_production
      - JWT_EXPIRATION=24h
      # R2 configuration (if needed)
      - R2_ENDPOINT_URL=${R2_ENDPOINT_URL:-}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME:-}
      - R2_OBJECT_KEY_POSTGRES=${R2_OBJECT_KEY_POSTGRES:-db/bookdb.sql}
      - R2_OBJECT_KEY_QDRANT=${R2_OBJECT_KEY_QDRANT:-embeddings}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID:-}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY:-}
    depends_on:
      - postgres-dev
      - qdrant-dev
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/api/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  # PostgreSQL database for development  postgres-dev:
  postgres-dev:
    image: postgres:16-alpine
    container_name: bookdb-postgres-dev
    ports:
      - "5432:5432" # Access database directly with tools like pgAdmin
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=bookdb_dev
      - POSTGRES_PASSWORD=bookdb_dev_password
      - POSTGRES_DB=bookdb_dev
      # Development-optimized PostgreSQL settings
      - POSTGRES_SHARED_BUFFERS=512MB
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U bookdb_dev" ]
      interval: 5s
      timeout: 3s
      retries: 3 # Qdrant vector database
  qdrant-dev:
    image: qdrant/qdrant:latest
    container_name: bookdb-qdrant-dev
    ports:
      - "6333:6333" # Qdrant dashboard accessible at localhost:6333/dashboard/
      - "6334:6334" # Expose gRPC port as well for backend connectivity
    volumes:
      - qdrant_data_dev:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__ENABLE_TLS=false
      # Optional API key for development
      - QDRANT_API_KEY=dev_qdrant_key
      # Set correct CORS headers to allow frontend access
      - QDRANT__SERVICE__CORS__ALLOW_ORIGINS=["*"]
      - QDRANT__SERVICE__CORS__ALLOW_METHODS=["GET", "POST", "PUT", "DELETE", "OPTIONS"]
      - QDRANT__SERVICE__CORS__ALLOW_HEADERS=["Content-Type", "api-key", "x-request-id", "api_key"]
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    # Install curl during container initialization so it's available for healthchecks
    command: >
      sh -c "apt-get update && apt-get install -y curl && 
      /qdrant/entrypoint.sh"

volumes:
  postgres_data_dev:
    driver: local
  qdrant_data_dev:
    driver: local

networks:
  app_network:
    driver: bridge
