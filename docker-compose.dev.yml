version: '3.8'

services:
  # Frontend service with nginx
  frontend:
    build:
      context: ./website/frontend
      dockerfile: Dockerfile
    container_name: bookdb-frontend-dev
    ports:
      - "80:80" # Main application on standard HTTP port
    volumes:
      # Mount nginx.conf for live reloading
      - ./website/frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      # Mount frontend source code for live reloading
      - ./website/frontend/src:/usr/share/nginx/html/src:ro
      - ./website/frontend/public:/usr/share/nginx/html/public:ro
    restart: unless-stopped
    depends_on:
      - backend
      - qdrant
    networks:
      - app_network
    environment:
      - BACKEND_SERVICE=backend
      - QDRANT_SERVICE=qdrant
      - VIRTUAL_HOST=localhost

  # Backend Go service
  backend:
    build:
      context: ./website/backend
      dockerfile: Dockerfile
    container_name: bookdb-backend-dev
    ports:
      - "8080:8080" # Direct access to API at localhost:8080
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=bookdb_dev
      - DB_PASSWORD=bookdb_dev_password
      - DB_NAME=bookdb_dev
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_HTTP_VERSION=1.1
      - APP_ENV=development
      - LOG_LEVEL=debug
      - PORT=8080
      - JWT_SECRET=dev_secret_key_change_in_production
      - JWT_EXPIRATION=24h
      # R2 configuration for database import (if needed)
      - R2_ENDPOINT_URL=${R2_ENDPOINT_URL:-}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME:-}
      - R2_OBJECT_KEY=${R2_OBJECT_KEY:-}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID:-}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY:-}
    depends_on:
      - postgres
      - qdrant
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:8080/api/health" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  # PostgreSQL database for development
  postgres:
    image: postgres:16-alpine
    container_name: bookdb-postgres-dev
    ports:
      - "5432:5432" # Access database directly with tools like pgAdmin
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=bookdb_dev
      - POSTGRES_PASSWORD=bookdb_dev_password
      - POSTGRES_DB=bookdb_dev
      # Development-optimized PostgreSQL settings
      - POSTGRES_SHARED_BUFFERS=128MB
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U bookdb_dev" ]
      interval: 5s
      timeout: 3s
      retries: 3

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: bookdb-qdrant-dev
    ports:
      - "6333:6333" # Qdrant dashboard accessible at localhost:6333/dashboard/
    volumes:
      - qdrant_data_dev:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__ENABLE_TLS=false
      # Optional API key for development
      - QDRANT_API_KEY=dev_qdrant_key
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:6333/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  postgres_data_dev:
    driver: local
  qdrant_data_dev:
    driver: local

networks:
  app_network:
    driver: bridge
